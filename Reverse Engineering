## Static Analysis ##
    - strings /path/filename
  This progam cannot be run in DOS mode | means exe
  MZ | windows
  PLS | linux
    
  strings.exe -a -nobanner .\demo1_new.exe | findstr /i succ
  strings.exe -a -n 5 -nobanner .\demo1_new.exe | select -first 10
  strings.exe -a -nobanner .\demo1_new.exe | select -first 10


## BEhavioral Analysis ## 
  chmod u+x   (If needed)
  run program as its make inteded


## Dynamic Analysis ##
  Run Progam how we want to (fuzzing, breaking, etc.)
  
  ./func $(echo "12345678")   # cmd substitution as parameter  (./func is the name of the executible)
  ./func <<<$(echo "12345678")  # simulates user input
  
  gdb ./func
    - shell, exit
    - quit
    - run    # runs function
    - info function
    - disass main or pdisass main
    - disass or pdisass questionable functions
    # red finctions might be vulnerable

    # Create script
    - run <<<$(python linbuf.py)
    # go to wiremask to pinpoint EIP useing the tool buffer overflow pattern
    # copy paste value in EIP back into wiremask
    # change offset and make an eip variable 
    
    - shell -> env - gdp ./func   
    - unset env LINES
    - unset env COLUMNS
    - show env
    - run -> ctrl+c
    - info proc map
    # first address after [heap] and last address [stack]
    # 0xf7de1000 (first of [heap]) and 0xffffe000 (last of [stack])
    - find /b [first addr heap], [last addr stack], 0xff, 0xe4
    # Convert to little indian
    ###
        0xf7|de|3b|59 -> "\x59\x3b\xde\xf7"
        0xf7|f5|88|ab -> "\xab\x88\xf5\xf7"
        0xf7|f6|45|fb -> "\xfb\x45\xf6\xf7"
        0xf7|f6|46|0f -> "\x0f\x46\xf6\xf7"
    ###
    # add nop = "\x90" * 15
    # make payload, fix print(), and run payload
    # msfvenom -p linux/x86/exec CMD=whoami -b '\x00\xfe\x20\x0a\xff' -f python
    # add buf to script and print statement
    - ./func <<$(python linbuf.py)


## Disassembly ##
  Open Ghidra > File > New Project > non-shared > complete
  File > Import File > Navigate/Select .exe 
  Search > ...for strings > succ


## Patching ##
  Work from end, going backwards
  Look for Success or other message
  Click on condition of statement you need for success to run
  
  Look at the assembly > Right clikc > patch instruction
  Set CMP to the same "EAX,EAX"
  
  File > Export program > change format to PE > change name and location
